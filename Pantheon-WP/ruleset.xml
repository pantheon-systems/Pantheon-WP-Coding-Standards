<?xml version="1.0"?>
<ruleset name="Pantheon-WP">
	<description>Pantheon WordPress Coding Standards</description>

	<exclude-pattern>/node_modules/*</exclude-pattern>
	<exclude-pattern>vendor/*</exclude-pattern>

	<arg name="extensions" value="php" />

	<!-- Include everything in the minimum ruleset -->
	<rule ref="Pantheon-WP-Minimum" />

	<!-- Rulesets to use -->
	<rule ref="PHPCompatibilityWP" />
	<rule ref="WordPress-Core">
		<exclude name="Universal.Arrays.DisallowShortArraySyntax" />
		<exclude name="Generic.Formatting.MultipleStatementAlignment.NotSameWarning" />
		<exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket" />
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine" />
		<exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments" />
		<exclude name="WordPress.Arrays.MultipleStatementAlignment.DoubleArrowNotAligned" />
		<exclude name="Universal.Operators.DisallowShortTernary.Found" />
		<!--
		The following was written by Ryan McCue in the HM Coding Standards.
		I tend to agree with the argument that Yoda conditions are ridiculous
		but he gives a convincing argument and explains the reasoning far
		better than I could. See: https://github.com/humanmade/coding-standards/blob/master/HM/ruleset.xml#L31-L50

		OK, real talk right now. Yoda conditions are ridiculous.
		The fundamental problem that Yoda conditions attempts to solve is:
		the equality operator is very close to the assignment operator.
		It's easy to mess up and accidentally assign to the variable you're
		trying to check.
		Here's the thing though. Yoda conditions just don't read correctly
		in the code flow. They require you to change the way you think
		about the control flow.
		Rather than forcing every conditional to be backwards, why not ban
		assignment from conditionals? You never really *need* to assign in
		a conditional.
		So, here's where I stand: no to Yoda conditions. Yes to banning
		assignment in conditionals.
		-->
		<exclude name="WordPress.PHP.YodaConditions.NotYoda" />
	</rule>
	<rule ref="WordPress-Extra" />
	<rule ref="WordPress-Docs" />
	<rule ref="WordPressVIPMinimum">
		<exclude name="WordPressVIPMinimum.Functions.RestrictedFunctions.wp_remote_get_wp_remote_get" />
		<exclude name="WordPressVIPMinimum.Files.IncludingFile.UsingVariable" />
		<exclude name="WordPressVIPMinimum.Variables.RestrictedVariables.cache_constraints___SERVER__HTTP_USER_AGENT__" />
	</rule>

	<!-- Rule exclusions -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax" />

	<!-- Require proper docblocks be used in all PHP files -->
	<rule ref="WordPress-Docs">
		<exclude name="Squiz.Commenting.FileComment.MissingPackageTag" />
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop" />
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop" />
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType" />
	</rule>

	<!-- Allow . in hook names. -->
	<rule ref="WordPress.NamingConventions.ValidHookName">
		<properties>
			<property name="additionalWordDelimiters" value="." />
		</properties>
	</rule>

	<!-- Ban inline assignment in control structures (see note on Yoda Conditions above). -->
	<rule ref="PSR2R.ControlStructures.NoInlineAssignment" />
</ruleset>